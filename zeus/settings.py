"""
Django settings for zeus project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import functools
from pathlib import Path

from decouple import RepositoryIni, Config, Csv
from dj_database_url import parse as db_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

config = Config(RepositoryIni(BASE_DIR / 'base.ini'))
# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = config('DEBUG', default=False, cast=bool)

if DEBUG:
    config = Config(RepositoryIni(BASE_DIR / 'dev.ini'))
else:
    config = Config(RepositoryIni(BASE_DIR / 'prod.ini'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', cast=str)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

PUBLIC_TENANT_DOMAIN_NAME = config('PUBLIC_TENANT_DOMAIN_NAME', cast=str)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    )
}
# https://django-oauth-toolkit.readthedocs.io/en/latest/rest-framework/getting_started.html
OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'}
}

# Tenants application definition
SHARED_APPS = (
    # Django tenants app
    'django_tenants',  # mandatory

    # Custom apps
    'tenant.apps.TenantConfig',

    # Tenant users apps
    'tenant_users.permissions',  # Defined in both shared apps and tenant apps
    'tenant_users.tenants',  # defined only in shared apps

    # everything below here is optional
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.staticfiles',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.admin',

    # Rest framework
    'rest_framework',
    'drf_yasg',
    'oauth2_provider',
)

TENANT_APPS = (
    # your tenant-specific apps
    'api.apps.ApiConfig',
    # Tenants users apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'tenant_users.permissions',
)

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

TENANT_MODEL = "tenant.Client"

TENANT_DOMAIN_MODEL = "tenant.Domain"

AUTH_USER_MODEL = 'tenant.OrganizationUser'

AUTHENTICATION_BACKENDS = (
    'tenant_users.permissions.backend.UserBackend',
)

TENANT_USERS_DOMAIN = 'test.com'

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zeus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'tenant' / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zeus.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
db_url = functools.partial(db_url, engine='django_tenants.postgresql_backend')

DATABASES = {
    'default': config(
        'DATABASE_URL',
        default='sqlite:///' / BASE_DIR / 'db.sqlite3',
        cast=db_url
    )
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Tenants
# https://django-tenants.readthedocs.io/en/latest/install.html

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config.get('SMTP_HOST', cast=str)
EMAIL_PORT = config.get('SMTP_PORT', cast=int)  # Replace with the appropriate SMTP port
EMAIL_USE_TLS = True  # Use TLS encryption for secure communication
EMAIL_HOST_USER = config.get('SMTP_USERNAME', cast=str)  # SMTP username or email
EMAIL_HOST_PASSWORD = config.get('SMTP_PASSWORD', cast=str)  # SMTP password
DEFAULT_FROM_EMAIL = config.get('DEFAULT_FROM_EMAIL', cast=str)  # Default "from" email address

ACTIVATION_LINK_URL = config.get('ACTIVATION_LINK_URL', cast=str)
